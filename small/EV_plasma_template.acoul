process_revision(1.2.0)
expose list<well> sample(well = "A1", volume = 50, velocity = 20)
well buffer(well = "B1", volume! = 40, velocity = 20)
well output(well = "C1", volume = 50, velocity = 1000)
expose int wash_volume = 150
expose int wash_velocity = 30
int frequency = 4150
int seed_volume = 28
int voltage = 10
int seedwash_volume = 40
int seedwash_velocity = 60

########## INITIALIZE #########

int steps = 0
int diff = 0

int time = 392
for_each(s in sample)
	time = time + (s.volume*60)/(s.velocity)
end
time = time + wash_volume*60/wash_velocity - 60
set("required_time", time)

########## SEED PARTICLE ASPIRATION ##########
set_status("Resuspending seed particles...")
stir("on")
wait(10)
stir("off")
us("track3", frequency, voltage)
set_light(255, 255, 255, 1)
empty_to("waste", 7500)
set_valve("buffer")
parallel
	goto("seed")
	aspirate(50, 3000)
endparallel
set_status("Aspirating seed particles...")
aspirate_from("chip", seed_volume, 50)
empty_to("waste", 7500)

########## SEED PARTICLE WASH ##########
diff = seedwash_velocity - 10
steps = diff/10
set_status("Moving to waste...")
set_valve("buffer")
parallel
	aspirate(seedwash_volume + 50, 3000)
	goto("waste")
endparallel
set_status("Washing seed particles...")
dispense_to("waste", 20, 5000)
set_valve("chip")
dramp(seedwash_volume, 10, seedwash_velocity, steps, 1, steps, "lin")
snapshot(experiment_name + "_seed_particles")

int i = 0
for_each(s in sample)
    if(i < 1)
        ############ ASPIRATING SAMPLE WELL #############
		diff = s.velocity - 20
		steps = diff/5
		set_status("Moving to sample well...")
		goto(s.well)
		set_status("Aspirating sample...")
		set_valve("chip")
		if(s.velocity>20)
			aramp(s.volume, 20, s.velocity, steps, 60, steps, "lin")
		else
			aspirate(s.volume, s.velocity)
		end
	else
		############# ASPIRATING ADDITIONAL SAMPLE WELLS ################
		diff = s.velocity - 20
		steps = diff/5
		set_valve("waste")
		set_status("Moving to next sample well...")
		parallel
			empty(7500)
			goto(s.well)
		endparallel
		aspirate_from("buffer", 50, 3000)
		set_status("Aspirating sample...")
		set_valve("chip")
		if(s.velocity>20)
			aramp(s.volume, 20, s.velocity, steps, 60, steps, "lin")
		else
			aspirate(s.volume, s.velocity)
		end
	end
	i = i + 1
end

############### ASPIRATING BUFFER #################

diff = buffer.velocity - 20
steps = diff/5
set_status("Moving to buffer well...")
set_valve("waste")
parallel
	empty(7500)
	goto(buffer.well)
endparallel
aspirate_from("buffer", 50, 3000)
set_status("Aspirating buffer...")
set_valve("chip")
if(buffer.velocity>20)
	aramp(buffer.volume, 20, buffer.velocity, steps, 1, steps, "lin")
else
	aspirate(buffer.volume, buffer.velocity)
endif
snapshot(experiment_name + "_sample_aspiration")

############# SYRINGE WASH ################

set_status("Cleaning syringe...")
aspirate_from("buffer", 1000, 3000)
empty_to("waste", 7500)
aspirate_from("buffer", 500, 3000)
empty_to("waste", 7500)

############### WASHING ##################

int diff = wash_velocity - 20
int steps = diff/5
set_status("Moving to waste...")
set_valve("buffer")
parallel
	aspirate(wash_volume + 50, 3000)
	goto("waste")
endparallel
set_status("Washing EVs...")
dispense_to("waste", 20, 5000)
set_valve("chip")
if(wash_velocity>20)
	dramp(wash_volume, 20, wash_velocity, steps, 1, steps, "lin")
else
	dispense(wash_volume, wash_velocity)
end
snapshot(experiment_name + "_washed_sample")

############# DISPENSING SAMPLE ###############
set_status("Moving to output well...")
set_valve("buffer")

if(output.volume<50)
	us("constant", 0, 0)
	parallel
		goto(output.well)
		aspirate(output.volume + 50, 3000)
	endparallel
	dispense_to("waste", 20, 5000)
	wait(15)
else
	parallel
		goto(output.well)
		aspirate(output.volume + 50, 3000)
	endparallel
	dispense_to("waste", 20, 5000)
	us("constant", 0, 0)
endif

set_status("Dispensing sample...")
dispense_to("chip", output.volume, output.velocity)
set_light(0, 255, 0, 1)
snapshot(experiment_name + "_after_dispense")
set_valve("waste")
parallel
	empty(7500)
	goto("home")
endparallel
set_status("Done!")
add_process_after("post_sample_clean_pure.acoul")
set_light(0)

