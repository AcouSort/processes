process_revision(1.2.0)
well sample(well = "A1", volume = 100, velocity = 50)
well buffer(well = "B1", volume! = 30, velocity = 50)
well wash1(well = "C1", volume = 50, velocity = 50)
well wash2(well = "D1", volume = 50, velocity = 50)
well wash3(well = "E1", volume = 50, velocity = 50)
well wash4(well = "F1", volume = 50, velocity = 50)
well output(well = "G1", volume = 60, velocity = 1000)
expose int wash_volume = 150
expose int wash_velocity = 50
int frequency = 4250
int sweep_volume = 25
int seed_volume = 95
expose int voltage = 12
int seedwash_volume = 150
int syringe_wash = 500
int seedwash_velocity = 300
expose int loops = 3

########## INITIALIZE #########

int steps = 0
int diff = 0
int sampletime = 0
int samplediff = sampletime - 60
int washdiff = wash_volume*60/wash_velocity
int time = 442 + samplediff + washdiff
set("required_time", time)

########## SEED PARTICLE ASPIRATION ##########
set_status("Resuspending seed particles...")
stir("on")
wait(10)
stir("off")
us("track3", frequency, voltage)
empty_to("waste", 7500)
set_valve("buffer")
parallel
	goto("seed")
	aspirate(50, 3000)
endparallel
set_status("Aspirating seed particles...")
aspirate_from("chip", seed_volume, 200)
empty_to("waste", 7500)

########## SEED PARTICLE WASH ##########
diff = seedwash_velocity - 50
steps = diff/25 + 1
set_status("Moving to waste...")
set_valve("buffer")
parallel
	aspirate(seedwash_volume + 50, 3000)
	goto("waste")
endparallel
dispense_to("waste", 20, 5000)
set_status("Washing seed particles...")
set_valve("chip")
dramp(seedwash_volume, 50, seedwash_velocity, steps, 1, steps, "lin")
set_light(255, 255, 255, 1)
wait(1)
snapshot(experiment_name + "_seed_particles")
wait(1)
set_light(0)

########## ASPIRATING SAMPLE ################
diff = sample.velocity - 50
steps = diff/25
set_status("Moving to sample well...")
set_valve("buffer")
parallel
	goto(sample.well)
	aspirate(20, 3000)
endparallel
set_status("Aspirating sample...")
set_valve("chip")
if(sample.velocity>50)
	aramp(sample.volume, 50, sample.velocity, steps, 60, steps, "lin")
else
	aspirate(sample.volume, sample.velocity)
endif

############### ASPIRATING BUFFER #################

diff = buffer.velocity - 50
steps = diff/25 + 1
set_status("Moving to buffer well...")
set_valve("waste")
parallel
	empty(7500)
	goto(buffer.well)
endparallel
aspirate_from("buffer", 50, 3000)
set_status("Aspirating buffer...")
set_valve("chip")
if(buffer.velocity>50)
	aramp(sweep_volume, 50, buffer.velocity, steps, 1, steps, "lin")
else
	aspirate(sweep_volume, buffer.velocity)
endif
snapshot(experiment_name + "_sample_aspiration")

############# HIGH RECOVERY ###############

set_status("Looping sample...")
repeat(loops)
	dispense_to("waste", 10, 5000)
	dispense_to("chip", sample.volume, sample.velocity)
	aspirate_from("buffer", 10, 3000)
	aspirate_from("chip", sample.volume, sample.velocity)
end

############# SYRINGE WASH ################

set_status("Cleaning syringe...")
empty_to("waste", 7500)
aspirate_from("buffer", 1000, 3000)
empty_to("waste", 7500)
aspirate_from("buffer", 1000, 3000)
empty_to("waste", 7500)

############### WASHING ##################

int diff = wash_velocity - 50
int steps = diff/25 + 1
set_status("Moving to waste...")
set_valve("buffer")
parallel
	aspirate(wash_volume + 50, 3000)
	goto("waste")
endparallel
dispense_to("waste", 20, 5000)
set_status("Washing EVs...")
goto(wash1.well)
set_valve("chip")
parallel_ff
	dispense_to("chip", wash_volume, wash_velocity)
endparallel
int wait_time = 60*wash1.volume/wash1.velocity
wait(wait_time)
goto(wash2.well)
int wait_time = 60*wash2.volume/wash2.velocity
wait(wait_time)
goto(wash3.well)
int wait_time = 60*wash3.volume/wash2.velocity
wait(wait_time)
goto(wash4.well)
int wait_time = 60*wash4.volume/wash3.velocity
wait_for("pump")

############# DISPENSING SAMPLE ###############

set_status("Moving to output well...")
us("constant", 0, 0)
set_valve("buffer")
parallel
    goto(output.well)
    aspirate(output.volume + 50, 3000)
endparallel
dispense_to("waste", 20, 5000)
set_status("Dispensing sample...")
dispense_to("chip", output.volume, output.velocity)
set_light(0, 255, 0, 1)
snapshot(experiment_name + "_after_dispense")
set_valve("waste")
parallel
	empty(7500)
	goto("home")
endparallel
set_status("Done!")
add_process_after("post_sample_clean_pure.acoul")
set_light(0)
